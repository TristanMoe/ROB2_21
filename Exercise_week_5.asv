%% Initiate 
rosshutdown
setenv('ROS_MASTER_URI','http://192.168.1.200:11311')
setenv('ROS_IP','192.168.1.100')
rosinit('http://192.168.1.200:11311','NodeHost','192.168.1.50');

%% Makemap 
%map = openfig('map.fig');
map = makemap();

%% Subscribe to robot position 
odom = rossubscriber('/odom');

%% Subscribe to velocity  
robot = rospublisher('/mobile_base/commands/velocity');
velmsg = rosmessage(robot);

%% Set goal and find path 
goal = [80,75];
start = [40,10]; 
dx = DXform(map);
dx.plan(goal); 
path = dx.query(start, 'animate'); 
path = path(2:2:end,:); 

%%

% Set controller
controller = robotics.PurePursuit;
controller.Waypoints = path; 
controller.DesiredLinearVelocity = 0.3; 
controller.MaxAngularVelocity = 0.6; 
controller.LookaheadDistance = 0.5;

% Set movement properties
goalRadius = 0.1; 
distanceToGoal = norm(start - goalRadius); 

% Robot control loop
while( distanceToGoal > goalRadius )
    % Get turtlebot pose 
    odomdata = receive(odom, 2); 
    pose = odomdata.Pose.Pose;
    theta = pose.Orientation.W;
    poseVector = [pose.Position.X, pose.Position.Y, theta]; 
    
    % Get new values for robot
    [linVel, angVel, targetDir] = controller(poseVector);   
    
    % Pass new information to turtlebot. 
    velmsg.Linear.X = linVel; 
    velmsg.Angular.Z = angVel;       
    send(robot, velmsg);    
end


%% Simulering 
% Set current location of robot and goal
robotCurrentLocation = path(1,:);
robotGoal = path(end,:);

initialOrientation = 0;

robotCurrentPose = [robotCurrentLocation initialOrientation];

robotRadius = 0.4;
robot = ExampleHelperRobotSimulator('emptyMap',2);
robot.enableLaser(false);
robot.setRobotSize(robotRadius);
robot.showTrajectory(true);
robot.setRobotPose(robotCurrentPose);

plot(path(:,1), path(:,2),'k--d')
xlim([0 150])
ylim([0 100])

controller = robotics.PurePursuit;
controller.Waypoints = path;
controller.DesiredLinearVelocity = 4;
controller.MaxAngularVelocity = 2;
controller.LookaheadDistance = 100;

goalRadius = 0.5;
distanceToGoal = norm(robotCurrentLocation - robotGoal);

controlRate = robotics.Rate(10);
while( distanceToGoal > goalRadius )
    
    % Compute the controller outputs, i.e., the inputs to the robot
    [v, omega] = controller(robot.getRobotPose);
    
    % Simulate the robot using the controller outputs.
    drive(robot, v, omega);
    
    % Extract current location information ([X,Y]) from the current pose of the
    % robot
    robotCurrentPose = robot.getRobotPose;
    
    % Re-compute the distance to the goal
    distanceToGoal = norm(robotCurrentPose(1:2) - robotGoal);
    
    waitfor(controlRate);
    
end






